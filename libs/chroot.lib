#!/usr/bin/env bash
# BashLibs - libraries for Bash
# Copyright (C) 2012  Ivailo Monev
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Homepage: https://github.com/fluxer/BashStuff
#

# Chroot - chroot into Debian/Ubuntu filesystem
#
# Depending on $FILESYSTEM_DIR and $DEBUG

CHECK_FILESYSTEM() {
    INFO "Checking filesystem"
    if [ ! "$FILESYSTEM_DIR" ];then
		ERROR "FILESYSTEM_DIR is null"
	elif [ ! -d "$FILESYSTEM_DIR" ];then
        ERROR "The filesystem path doesn't exists"
    elif [ ! -d "$FILESYSTEM_DIR/etc" ] || [ ! -d "$FILESYSTEM_DIR/usr" ] \
	|| [ ! -d "$FILESYSTEM_DIR/root" ] || [ ! -e "$FILESYSTEM_DIR/bin/bash" ];then
        ERROR "The filesystem path isn't usable or has been corruped"
    fi
}

CHROOT_PREPARE() {
	INFO "Preparing chroot"
	cp -f /etc/{hosts,resolv.conf} "$FILESYSTEM_DIR/etc"
	echo chroot > "$FILESYSTEM_DIR/etc/debian_chroot"
	ln -sf /proc/mounts "$FILESYSTEM_DIR/etc/mtab"
	touch "$FILESYSTEM_DIR/tmp/lock_chroot"
}

CHROOT_FIX() {
	for i in "sbin/initctl" "usr/sbin/update-grub";do
		if [ -e "$FILESYSTEM_DIR/$i" ] && [ ! -e "$FILESYSTEM_DIR/$i.blocked" ];then
			EXTRA_INFO "Blocking" "/$i"
			mv "$FILESYSTEM_DIR/$i" "$FILESYSTEM_DIR/$i.blocked"
			ln -s "$FILESYSTEM_DIR/bin/true" "$FILESYSTEM_DIR/$i"
		else
			EXTRA_WARNING "Skipped blocking of" "/$i"
		fi
	done
}

CHROOT_EXECUTE() {
	EXTRA_DEBUG "Executing in chroot" "$@"
	chroot "$FILESYSTEM_DIR" env HOME=/root LC_ALL=C $@ || WARNING "Chroot has returned exit status by internal command"
}

CHROOT_HELPER() {
	if [ "$CHROOT_HELPER" = "1" ];then
		INFO "Updating packages database"
		if [ "$DEBUG" = "1" ];then
            CHROOT_EXECUTE "apt-get update"
        else
            CHROOT_EXECUTE "apt-get update -qq"
        fi
        
		INFO "Making sure everything is configured"
		CHROOT_EXECUTE "dpkg --configure -a"
		if [ "$DEBUG" = "1" ];then
            CHROOT_EXECUTE "apt-get install -f"
        else
            CHROOT_EXECUTE "apt-get install -f -y -q"
        fi
	fi
}

CHROOT_UNDO_FIX() {	
	for i in "sbin/initctl" "usr/sbin/update-grub";do
		if [ -e "$FILESYSTEM_DIR/$i.blocked" ];then
			EXTRA_INFO "Unblocking" "/$i"
			mv -f "$FILESYSTEM_DIR/$i.blocked" "$FILESYSTEM_DIR/$i"
		else
			EXTRA_WARNING "Skipped unblocking of" "/$i"
		fi
	done
}

CHROOT_CLEAN() {	
	INFO "Cleaning up chroot"
	CHROOT_EXECUTE "apt-get clean"
	rm -f "$FILESYSTEM_DIR/etc/"{hostname,hosts,resolv.conf,debian_chroot}
	rm -rf "$FILESYSTEM_DIR/tmp/"* "$FILESYSTEM_DIR/tmp/".??* 
}

CHROOT_MOUNT_PSEUDO() {
	for i in dev dev/pts proc sys;do
		if [ "$(grep "$FILESYSTEM_DIR/$i" /proc/mounts)" ];then  
			WARNING "/$i is already mounted, skipping"
		else
			EXTRA_INFO "Mounting" "/$i"
			EXTRA_DEBUG "To" "$FILESYSTEM_DIR/$i"
			mount --bind /$i "$FILESYSTEM_DIR/$i" || ERROR "Unable to mount $i"
		fi
	done
}

CHROOT_UNMOUNT_PSEUDO() {
	for i in dev proc sys;do
		if [ "$(grep "$FILESYSTEM_DIR/$i" /proc/mounts)" ];then
			EXTRA_INFO "Unmounting" "/$i"
			EXTRA_DEBUG "From" "$FILESYSTEM_DIR/$i"
			umount -fl "$FILESYSTEM_DIR/$i" || ERROR "Unable to unmount /$i"
		else
			WARNING "/$i is not mounted, skipping"
		fi
	done
}

CHROOT_VERB_UNMOUNT_PSEUDO() {
    INFO "Verbose unmounting"
    for i in `grep "$FILESYSTEM_DIR" /proc/mounts | cut -d' ' -f2 | sed 's/\\\040/ /g'`; do
        EXTRA_INFO "Unmounting" "${i#$FILESYSTEM_DIR}"
        umount -fl "$i" || WARNING "Unable to unmount $i"
    done
}

CHROOT_MOUNT_DBUS() {
    mkdir -p "$FILESYSTEM_DIR/var/lib/dbus"
    mkdir -p "$FILESYSTEM_DIR/var/run/dbus"

    INFO "Mounting /var/lib/dbus"
    mkdir -p "$FILESYSTEM_DIR/var/lib/dbus"
    mount --bind /var/run/dbus "$FILESYSTEM_DIR/var/lib/dbus" || WARNING "Unable to mount /var/lib/dbus"

    INFO "Mounting /var/run/dbus"
    mkdir -p "$FILESYSTEM_DIR/var/run/dbus" 
    mount --bind /var/run/dbus "$FILESYSTEM_DIR/var/run/dbus" || WARNING "Unable to mount /var/run/dbus"
}

ALLOW_LOCAL_X() {
    INFO "Allwoing local access to X-server"
    xhost +local:
}

BLOCK_LOCAL_X() {
    INFO "Blocking local access to X-server"
    xhost -local:
}
