#!/bin/bash

# Avoid any encoding problems
export LANG=C

# check if messages are to be printed using color
unset ALL_OFF BOLD BLUE GREEN RED YELLOW
if [[ -t 2 ]]; then
	# prefer terminal safe colored and bold text when tput is supported
	if tput setaf 0 &>/dev/null; then
		ALL_OFF="$(tput sgr0)"
		BOLD="$(tput bold)"
		BLUE="${BOLD}$(tput setaf 4)"
		GREEN="${BOLD}$(tput setaf 2)"
		RED="${BOLD}$(tput setaf 1)"
		YELLOW="${BOLD}$(tput setaf 3)"
	else
		ALL_OFF="\e[1;0m"
		BOLD="\e[1;1m"
		BLUE="${BOLD}\e[1;34m"
		GREEN="${BOLD}\e[1;32m"
		RED="${BOLD}\e[1;31m"
		YELLOW="${BOLD}\e[1;33m"
	fi
fi
readonly ALL_OFF BOLD BLUE GREEN RED YELLOW

plain() {
	local mesg=$1; shift
	printf "${BOLD}    ${mesg}${ALL_OFF}\n" "$@" >&2
}

msg() {
	local mesg=$1; shift
	printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

msg2() {
	local mesg=$1; shift
	printf "${BLUE}  ->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

warning() {
	local mesg=$1; shift
	printf "${YELLOW}==> WARNING:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

error() {
	local mesg=$1; shift
	printf "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

stat_busy() {
	local mesg=$1; shift
	printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}...${ALL_OFF}" >&2
}

stat_done() {
	printf "${BOLD}done${ALL_OFF}\n" >&2
}

setup_workdir() {
	[[ -z $WORKDIR ]] && WORKDIR=$(mktemp -d --tmpdir "${0##*/}.XXXXXXXXXX")
}

cleanup() {
	trap - EXIT INT QUIT TERM

	[[ -n $WORKDIR ]] && rm -rf "$WORKDIR"
	[[ $1 ]] && exit $1
}

abort() {
	msg 'Aborting...'
	cleanup 0
}

die() {
	error "$*"
	cleanup 1
}

trap abort INT QUIT TERM HUP
trap 'cleanup 0' EXIT

##
#  usage : in_array( $needle, $haystack )
# return : 0 - found
#          1 - not found
##
in_array() {
	local needle=$1; shift
	local item
	for item in "$@"; do
		[[ $item = $needle ]] && return 0 # Found
	done
	return 1 # Not Found
}

##
#  usage : get_full_version( [$pkgname] )
# return : full version spec, including epoch (if necessary), pkgver, pkgrel
##
get_full_version() {
	# set defaults if they weren't specified in buildfile
	pkgbase=${pkgbase:-${pkgname[0]}}
	epoch=${epoch:-0}
	if [[ -z $1 ]]; then
		if [[ $epoch ]] && (( ! $epoch )); then
			echo $pkgver-$pkgrel
		else
			echo $epoch:$pkgver-$pkgrel
		fi
	else
		for i in pkgver pkgrel epoch; do
			local indirect="${i}_override"
			eval $(declare -f package_$1 | sed -n "s/\(^[[:space:]]*$i=\)/${i}_override=/p")
			[[ -z ${!indirect} ]] && eval ${indirect}=\"${!i}\"
		done
		if (( ! $epoch_override )); then
			echo $pkgver_override-$pkgrel_override
		else
			echo $epoch_override:$pkgver_override-$pkgrel_override
		fi
	fi
}


set -e

IGNORE_INTERNAL=0

if [[ $1 = "--ignore-internal" ]]; then
	IGNORE_INTERNAL=1
	shift
fi

script_mode=${0##*/find-lib}

case $script_mode in
	deps|provides) true;;
	*) die "Unknown mode $script_mode" ;;
esac

if [[ -z $1 ]]; then
	echo "${0##*/} [options] <package file|extracted package dir>"
	echo "Options:"
	echo "    --ignore-internal      ignore internal libraries"
	exit 1
fi

if [[ -d $1 ]]; then
	pushd $1 >/dev/null
else
	setup_workdir

	case ${script_mode} in
		deps) bsdtar -C $WORKDIR -xf "$1";;
		provides) bsdtar -C $WORKDIR -xf "$1" --include="*.so*";;
	esac

	pushd $WORKDIR >/dev/null
fi

process_sofile() {
	# extract the library name: libfoo.so
	soname="${sofile%%\.so\.*}.so"
	# extract the major version: 1
	soversion="${sofile##*\.so\.}"
	if [[ "$soversion" = "$sofile" ]] && (($IGNORE_INTERNAL)); then
		continue
	fi
	if ! in_array "${soname}=${soversion}-${soarch}" ${soobjects[@]}; then
		# libfoo.so=1-64
		echo "${soname}=${soversion}-${soarch}"
		soobjects=(${soobjects[@]} "${soname}=${soversion}-${soarch}")
	fi
}

case $script_mode in
	deps) find_args="-perm -u+x";;
	provides) find_args="-name *.so*";;
esac

find . -type f $find_args | while read filename; do
	if [[ $script_mode = "provides" ]]; then
		# ignore if we don't have a shared object
		if ! LC_ALL=C readelf -h "$filename" 2>/dev/null | grep -q '.*Type:.*DYN (Shared object file).*'; then
			continue
		fi
	fi

	# get architecture of the file; if soarch is empty it's not an ELF binary
	soarch=$(LC_ALL=C readelf -h "$filename" 2>/dev/null | sed -n 's/.*Class.*ELF\(32\|64\)/\1/p')
	[[ -n $soarch ]] || continue

	if [[ $script_mode = "provides" ]]; then
		# get the string binaries link to: libfoo.so.1.2 -> libfoo.so.1
		sofile=$(LC_ALL=C readelf -d "$filename" 2>/dev/null | sed -n 's/.*Library soname: \[\(.*\)\].*/\1/p')
		[[ -z $sofile ]] && sofile="${filename##*/}"
		process_sofile
	elif [[ $script_mode = "deps" ]]; then
		# process all libraries needed by the binary
		for sofile in $(LC_ALL=C readelf -d "$filename" 2>/dev/null | sed -nr 's/.*Shared library: \[(.*)\].*/\1/p'); do
			process_sofile
		done
	fi
done

popd >/dev/null
