#!/bin/bash
# This script rebuilds a list of packages in order
# and reports anything that fails
# 
# Due to sudo usage, it is recommended to allow makechrootpkg
# to be run with NOPASSWD in your sudoers file
#
# FIXME
# Currently uses $(pwd)/rebuilds as the directory for rebuilding...
# TODO make this work for community too

# Avoid any encoding problems
export LANG=C

# check if messages are to be printed using color
unset ALL_OFF BOLD BLUE GREEN RED YELLOW
if [[ -t 2 ]]; then
	# prefer terminal safe colored and bold text when tput is supported
	if tput setaf 0 &>/dev/null; then
		ALL_OFF="$(tput sgr0)"
		BOLD="$(tput bold)"
		BLUE="${BOLD}$(tput setaf 4)"
		GREEN="${BOLD}$(tput setaf 2)"
		RED="${BOLD}$(tput setaf 1)"
		YELLOW="${BOLD}$(tput setaf 3)"
	else
		ALL_OFF="\e[1;0m"
		BOLD="\e[1;1m"
		BLUE="${BOLD}\e[1;34m"
		GREEN="${BOLD}\e[1;32m"
		RED="${BOLD}\e[1;31m"
		YELLOW="${BOLD}\e[1;33m"
	fi
fi
readonly ALL_OFF BOLD BLUE GREEN RED YELLOW

plain() {
	local mesg=$1; shift
	printf "${BOLD}    ${mesg}${ALL_OFF}\n" "$@" >&2
}

msg() {
	local mesg=$1; shift
	printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

msg2() {
	local mesg=$1; shift
	printf "${BLUE}  ->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

warning() {
	local mesg=$1; shift
	printf "${YELLOW}==> WARNING:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

error() {
	local mesg=$1; shift
	printf "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

stat_busy() {
	local mesg=$1; shift
	printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}...${ALL_OFF}" >&2
}

stat_done() {
	printf "${BOLD}done${ALL_OFF}\n" >&2
}

setup_workdir() {
	[[ -z $WORKDIR ]] && WORKDIR=$(mktemp -d --tmpdir "${0##*/}.XXXXXXXXXX")
}

cleanup() {
	trap - EXIT INT QUIT TERM

	[[ -n $WORKDIR ]] && rm -rf "$WORKDIR"
	[[ $1 ]] && exit $1
}

abort() {
	msg 'Aborting...'
	cleanup 0
}

die() {
	error "$*"
	cleanup 1
}

trap abort INT QUIT TERM HUP
trap 'cleanup 0' EXIT

##
#  usage : in_array( $needle, $haystack )
# return : 0 - found
#          1 - not found
##
in_array() {
	local needle=$1; shift
	local item
	for item in "$@"; do
		[[ $item = $needle ]] && return 0 # Found
	done
	return 1 # Not Found
}

##
#  usage : get_full_version( [$pkgname] )
# return : full version spec, including epoch (if necessary), pkgver, pkgrel
##
get_full_version() {
	# set defaults if they weren't specified in buildfile
	pkgbase=${pkgbase:-${pkgname[0]}}
	epoch=${epoch:-0}
	if [[ -z $1 ]]; then
		if [[ $epoch ]] && (( ! $epoch )); then
			echo $pkgver-$pkgrel
		else
			echo $epoch:$pkgver-$pkgrel
		fi
	else
		for i in pkgver pkgrel epoch; do
			local indirect="${i}_override"
			eval $(declare -f package_$1 | sed -n "s/\(^[[:space:]]*$i=\)/${i}_override=/p")
			[[ -z ${!indirect} ]] && eval ${indirect}=\"${!i}\"
		done
		if (( ! $epoch_override )); then
			echo $pkgver_override-$pkgrel_override
		else
			echo $epoch_override:$pkgver_override-$pkgrel_override
		fi
	fi
}


if (( $# < 1 )); then
	echo "usage: $(basename $0) <chrootdir> <packages to rebuild>"
	echo "  example: $(basename $0) ~/chroot readline bash foo bar baz"
	exit 1
fi

# Source makepkg.conf; fail if it is not found
if [[ -r '/etc/makepkg.conf' ]]; then
	source '/etc/makepkg.conf'
else
	die '/etc/makepkg.conf not found!'
fi

bump_pkgrel() {
	# Get the current pkgrel from SVN and update the working copy with it
	# This prevents us from incrementing out of control :)
	pbuild='.svn/text-base/PKGBUILD.svn-base'
	oldrel=$(grep 'pkgrel=' $pbuild | cut -d= -f2)

	#remove decimals
	rel=$(echo $oldrel | cut -d. -f1)

	newrel=$(($rel + 1))

	sed -i "s/pkgrel=$oldrel/pkgrel=$newrel/" PKGBUILD
}

pkg_from_pkgbuild() {
	# we want the sourcing to be done in a subshell so we don't pollute our current namespace
	export CARCH PKGEXT
	(source PKGBUILD; echo "$pkgname-$pkgver-$pkgrel-$CARCH$PKGEXT")
}

chrootdir="$1"; shift
pkgs="$@"

SVNPATH='svn+ssh://gerolde.archlinux.org/srv/svn-packages'

msg "Work will be done in $(pwd)/rebuilds"

REBUILD_ROOT="$(pwd)/rebuilds"
mkdir -p "$REBUILD_ROOT"
cd "$REBUILD_ROOT"

/usr/bin/svn co -N $SVNPATH

FAILED=""
for pkg in $pkgs; do
	cd "$REBUILD_ROOT/svn-packages"

	msg2 "Building '$pkg'"
	/usr/bin/svn update "$pkg"
	if [[ ! -d "$pkg/trunk" ]]; then
		FAILED="$FAILED $pkg"
		warning "$pkg does not exist in SVN"
		continue
	fi
	cd "$pkg/trunk/"

	bump_pkgrel

	if ! sudo makechrootpkg -u -d -r "$chrootdir" -- --noconfirm; then
		FAILED="$FAILED $pkg"
		error "$pkg Failed!"
	else
		pkgfile=$(pkg_from_pkgbuild)
		if [[ -e $pkgfile ]]; then
			msg2 "$pkg Complete"
		else
			FAILED="$FAILED $pkg"
			error "$pkg Failed, no package built!"
		fi
	fi
done

cd "$REBUILD_ROOT"
if [[ -n $FAILED ]]; then
	msg 'Packages failed:'
	for pkg in $FAILED; do
		msg2 "$pkg"
	done
fi

msg 'SVN pkgbumps in svn-packages/ - commit when ready'
